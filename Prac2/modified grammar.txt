PROGR ::= ALGO PROCDEFS
PROCDEFS ::= ε|, PROC PROCDEFS
PROC ::= pDIGITS{ PROGR } 
DIGITS ::= D MORE
D ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
MORE ::= ε |D MORE
ALGO ::= INSTR COMMENT SEQ
SEQ ::= ε | ; ALGO
INSTR ::= INPUT | OUTPUT | ASSIGN | CALL | LOOP | BRANCH | h
CALL ::= c pDIGITS 
ASSIGN ::= NUMVAR :=NUMEXPR | BOOLVAR:=BOOLEXPR | STRINGV :=STRI
LOOP ::= w(BOOLEXPR){ALGO}
BRANCH ::= i(BOOLEXPR)t{ALGO}ELSE 
ELSE ::= ε |e {ALGO}
NUMVAR ::= nDIGITS 
BOOLVAR ::= bDIGITS
STRINGV ::= sDIGITS
NUMEXPR ::= a ( NUMEXPR , NUMEXPR ) | m (NUMEXPR , NUMEXPR) | d ( NUMEXPR , NUMEXPR )  | NUMVAR | DECNUM 
DECNUM ::= 0.00 | NEG | POS
NEG ::= ‒POS
POS ::= INT.DD 
INT ::= 1MORE | 2MORE | 3MORE | 4MORE | 5MORE | 6MORE | 7MORE | 8MORE | 9MORE
BOOLEXPR ::= LOGIC | CMPR
LOGIC ::= BOOLVAR | T | F | ^ ( BOOLEXPR , BOOLEXPR ) | v ( BOOLEXPR , BOOLEXPR ) | ! ( BOOLEXPR ) 
CMPR ::= E ( NUMEXPR , NUMEXPR ) | < ( NUMEXPR , NUMEXPR ) | > ( NUMEXPR , NUMEXPR )
STRI ::= "CCCCCCCCCCCCCCC"
C ::= all the usual ASCII keyboard characters, including the blank_space!
COMMENT ::= *CCCCCCCCCCCCCCC* | ε
INPUT ::= g NUMVAR
OUTPUT ::= TEXT | VALUE
VALUE ::= o NUMVAR
TEXT ::= r STRINGV 